// Generated by CoffeeScript 1.6.3
(function() {
  var Jobs, root;
  root = this;
  Jobs = (function() {
    function Jobs() {}

    Jobs.prototype.model_trigger = function(TG_TABLE_NAME, TG_OP, NEW, OLD) {
      var callback, hook, job, live_data, model, res, upsert_func, _i, _len, _ref, _ref1, _ref2, _ref3, _results;
      upsert_func = plv8.find_function("__upsert");
      model = JSON.parse(plv8.find_function("__find_model")(TG_TABLE_NAME.classify()));
      callback = {
        INSERT: "after_create",
        UPDATE: "after_update",
        DELETE: "after_destroy"
      }[TG_OP];
      live_data = JSON.stringify({
        table_name: TG_TABLE_NAME,
        op: TG_OP,
        data: (NEW || OLD).data
      });
      plv8.elog(NOTICE, "LIVE DATA", live_data);
      plv8.execute("SELECT pg_notify('live', $1);", [live_data]);
      _ref1 = (model != null ? (_ref = model.hooks) != null ? _ref[callback] : void 0 : void 0) || [];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        hook = _ref1[_i];
        if (hook.run_at == null) {
          hook.run_at = new Date();
        }
        hook.callback = callback;
        job = {
          hook: hook,
          table_name: TG_TABLE_NAME,
          record_uuid: (NEW != null ? (_ref2 = NEW.data) != null ? _ref2.uuid : void 0 : void 0) || (OLD != null ? (_ref3 = OLD.data) != null ? _ref3.uuid : void 0 : void 0),
          record: TG_OP === "DELETE" ? OLD.data : void 0
        };
        res = upsert_func("core", "jobs", JSON.stringify(job));
        _results.push(plv8.execute("SELECT pg_notify('jobs', $1);", [res]));
      }
      return _results;
    };

    Jobs.prototype.jobs_model_callbacks = function(TG_TABLE_NAME, TG_OP, NEW, OLD) {
      var table_name, table_schema, _ref, _ref1, _ref2, _ref3;
      table_name = ((NEW != null ? (_ref = NEW.data) != null ? _ref.name : void 0 : void 0) || (OLD != null ? (_ref1 = OLD.data) != null ? _ref1.name : void 0 : void 0)).tableize();
      table_schema = ((NEW != null ? (_ref2 = NEW.data) != null ? _ref2.table_schema : void 0 : void 0) || (OLD != null ? (_ref3 = OLD.data) != null ? _ref3.table_schema : void 0 : void 0)) || "public";
      if (table_schema === "core") {
        return;
      }
      if (TG_OP === "DELETE") {
        plv8.execute("DELETE FROM core.jobs WHERE __string(data, 'table_name'::text) = $1;", [table_name]);
      }
      if (TG_OP === "INSERT" || TG_OP === "UPDATE" && (NEW.data.hooks != null) && (OLD.data.hooks == null)) {
        return plv8.execute("CREATE TRIGGER " + table_schema + "_" + table_name + "_model_trigger \nAFTER INSERT OR UPDATE OR DELETE ON " + table_schema + "." + table_name + " \nFOR EACH ROW EXECUTE PROCEDURE model_trigger();");
      }
    };

    return Jobs;

  })();
  return root.actn.jobs = new Jobs;
}).call(this);
